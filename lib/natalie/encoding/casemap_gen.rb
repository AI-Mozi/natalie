# Compression algorithm described here:
# https://github.com/apankrat/notes/tree/master/fast-case-conversion
#
# This file generates the casemap.cpp source used by Natalie.
# To regenerate, run:
#
#     ruby lib/natalie/encoding/casemap_gen.rb > src/encoding/casemap.cpp

require 'open-uri'

EMPTY_BLOCK = [0] * 256

def calc_delta(code, mapped)
  if mapped && !mapped.empty?
    mapped = mapped.to_i(16)
    mapped - code
  else
    0
  end
end

def format_array(nums, count_per_line:, num_width:)
  "    " +
  nums.each_slice(count_per_line).map do |slice|
    slice.map do |num|
      num.to_s.rjust(num_width)
    end.join(', ')
  end.join(",\n    ")
end

def build_map_and_index(blocks)
  map = EMPTY_BLOCK.dup
  idx = 0
  index = blocks.map do |key, deltas|
    if deltas.all?(&:zero?)
      0
    else
      map += deltas
      idx += EMPTY_BLOCK.size
    end
  end
  [map, index]
end

unless File.exist?('/tmp/UnicodeData.txt')
  File.write(
    '/tmp/UnicodeData.txt',
    URI.open('http://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt').read
  )
end

data = File.read('/tmp/UnicodeData.txt').split(/\n/).map { |l| l.split(';') }
lcase_blocks = Hash.new { |h, k| h[k] = EMPTY_BLOCK.dup }
ucase_blocks = Hash.new { |h, k| h[k] = EMPTY_BLOCK.dup }
tcase_blocks = Hash.new { |h, k| h[k] = EMPTY_BLOCK.dup }
data.each do |code, _, _, _, _, _, _, _, _, _, _, _, upper, lower, title|
  code = code.to_i(16)
  lower_delta = calc_delta(code, lower)
  upper_delta = calc_delta(code, upper)
  title_delta = calc_delta(code, title)
  block = code >> 8
  lcase_blocks[block][code & 0xff] = lower_delta
  ucase_blocks[block][code & 0xff] = upper_delta
  tcase_blocks[block][code & 0xff] = title_delta
end

lcase_map, lcase_index = build_map_and_index(lcase_blocks)
ucase_map, ucase_index = build_map_and_index(ucase_blocks)
tcase_map, tcase_index = build_map_and_index(tcase_blocks)

puts '// This file is auto-generated from http://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt'
puts '// See casemap_gen.rb in this repository for instructions regenerating it.'
puts '// DO NOT EDIT THIS FILE BY HAND!'
puts
puts '#include "natalie/encoding_object.hpp"'
puts '#include "natalie/types.hpp"'
puts
puts 'namespace Natalie {'
puts
puts "nat_int_t lcase_map[] = {\n#{format_array(lcase_map, count_per_line: 10, num_width: 6)}\n};"
puts
puts "nat_int_t ucase_map[] = {\n#{format_array(ucase_map, count_per_line: 10, num_width: 6)}\n};"
puts
puts "nat_int_t tcase_map[] = {\n#{format_array(tcase_map, count_per_line: 10, num_width: 6)}\n};"
puts
puts "nat_int_t lcase_index[] = {\n#{format_array(lcase_index, count_per_line: 10, num_width: 4)}\n};"
puts
puts "nat_int_t ucase_index[] = {\n#{format_array(ucase_index, count_per_line: 10, num_width: 4)}\n};"
puts
puts "nat_int_t tcase_index[] = {\n#{format_array(tcase_index, count_per_line: 10, num_width: 4)}\n};"
puts
puts '}'
